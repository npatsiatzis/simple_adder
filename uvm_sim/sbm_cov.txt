+++++++++++++++++++++++++++++++++++++++++++++
++++++++++       REPORT INFO       ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


SUMMARY
===============================================
|     Property     |          Value           |
===============================================
| User             | runner                   |
| Host             | fd6d1668300a             |
| Tool             | Riviera-PRO 2022.04      |
| Report file      | /home/runner/sbm_cov.txt |
| Report date      | 2023-09-29 12:34         |
| Report arguments | -verbose                 |
| Input file       | simulation session       |
| Input file date  | simulation session       |
| Number of tests  | 1                        |
===============================================


TEST DETAILS
==============================================
| Property |              Value              |
==============================================
| Test     | work.acdb:work                  |
| Status   | Ok                              |
| Args     | asim +access+r -dbg -acdb       |
| Simtime  | 2630 ns                         |
| Cputime  | 0.986 s                         |
| Seed     | 1                               |
| Date     | 2023-09-29 12:34                |
| User     | runner                          |
| Host     | fd6d1668300a                    |
| Host os  | Linux64                         |
| Tool     | Riviera-PRO 2022.04 (simulator) |
==============================================


+++++++++++++++++++++++++++++++++++++++++++++
++++++++++     DESIGN HIERARCHY    ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


CUMULATIVE SUMMARY
=============================================
|    Coverage Type    | Weight | Hits/Total |
=============================================
| Statement Coverage  |      1 |    70.807% |
|---------------------|--------|------------|
| Statements          |        |  114 / 161 |
| Subprograms         |        |    26 / 51 |
=============================================
| Branch Coverage     |      1 |    34.210% |
|---------------------|--------|------------|
| Branch paths        |        |    13 / 38 |
| Branches            |        |     5 / 19 |
=============================================
| Covergroup Coverage |      1 |   100.000% |
|---------------------|--------|------------|
| Types               |        |      1 / 1 |
=============================================
| Assertion Coverage  |      1 |   100.000% |
|---------------------|--------|------------|
| Assertions          |        |      5 / 5 |
| Covers              |        |      1 / 1 |
=============================================
CUMULATIVE INSTANCE-BASED COVERAGE: 76.254%
COVERED INSTANCES: 2 / 10
FILES: 10


INSTANCE - /tb_top : work.tb_top


    SUMMARY
    =========================================================================
    |   Coverage Type    | Weight | Local Hits/Total | Recursive Hits/Total |
    =========================================================================
    | Statement Coverage |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Statements         |        |            6 / 6 |              13 / 13 |
    | Subprograms        |        |            0 / 0 |                0 / 0 |
    =========================================================================
    | Branch Coverage    |      1 |      No branches |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Branch paths       |        |            0 / 0 |                4 / 4 |
    | Branches           |        |            0 / 0 |                2 / 2 |
    =========================================================================
    | Assertion Coverage |      1 |    No assertions |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Assertions         |        |            0 / 0 |                3 / 3 |
    | Covers             |        |            0 / 0 |                1 / 1 |
    =========================================================================
    WEIGHTED AVERAGE LOCAL: 100.000%
    WEIGHTED AVERAGE RECURSIVE: 100.000%


    STATEMENT COVERAGE
    ========================================================================================================================================
    | Line | Hits |                                                  Source: testbench.sv                                                  |
    |------|------|------------------------------------------------------------------------------------------------------------------------|
    | 21   |      |     //Registers the Interface in the configuration block                                                               |
    | 22   |      |     //so that other blocks can use it                                                                                  |
    | 23   |  1   |     uvm_resource_db#(virtual adder_intf)::set(.scope("ifs"), .name("adder_intf"),                         .val(intf)); |
    | 24   |      |                                                                                                                        |
    | 25   |      |     //Executes the test                                                                                                |
    | 26   |  1   |     run_test("adder_test");                                                                                            |
    | 27   |      |   end                                                                                                                  |
    | 28   |      |                                                                                                                        |
    | 29   |      |   //Variable initialization                                                                                            |
    | 30   |      |   initial begin                                                                                                        |
    | 31   |  1   |     intf.i_clk = 1'b1;                                                                                                 |
    | 32   |      |     // Dump waves                                                                                                      |
    | 33   |  1   |     $dumpfile("dump.vcd");                                                                                             |
    | 34   |  1   |     $dumpvars(0, tb_top);                                                                                              |
    | 35   |      |   end                                                                                                                  |
    | 36   |      |                                                                                                                        |
    | 37   |      |   //Clock generation                                                                                                   |
    | 38   |      |   always                                                                                                               |
    | 39   | 526  |     #5 intf.i_clk = ~intf.i_clk;                                                                                       |
    | 40   |      | endmodule : tb_top                                                                                                     |
    ========================================================================================================================================


INSTANCE - /tb_top/dut : work.adder


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      7 / 7 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      4 / 4 |
    | Branches           |        |      2 / 2 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      3 / 3 |
    | Covers             |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 100.000%


    STATEMENT COVERAGE
    ==================================================================================
    | Line | Hits |                        Source: design.sv                         |
    |------|------|------------------------------------------------------------------|
    | 17   |      |                                                                  |
    | 18   |      |     always_ff @(posedge i_clk or posedge i_rst) begin : proc_add |
    | 19   | 265  |         if(i_rst) begin                                          |
    | 20   |  2   |             o_C <= '0;                                           |
    | 21   |  2   |             o_valid <= 1'b0;                                     |
    | 22   |      |         end else begin                                           |
    | 23   | 263  |             o_valid <= 1'b0;                                     |
    | 24   | 263  |             if(i_valid) begin                                    |
    | 25   | 261  |                 o_C <= i_A+i_B;                                  |
    | 26   | 261  |                 o_valid <= 1'b1;                                 |
    | 27   |      |             end                                                  |
    | 28   |      |         end                                                      |
    ==================================================================================


    BRANCH COVERAGE
    ===============================
    |      Source: design.sv      |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#19#1#      |  2/2 |
    |     if_branch        |    2 |
    |     else_branch      |  263 |
    |----------------------|------|
    | IF branch#24#1#      |  2/2 |
    |     if_branch        |  261 |
    |     all_false_branch |    2 |
    ===============================


    ASSERTION COVERAGE
    ==================================================
    |     Name     |    Source     | Failed | Passed |
    |--------------|---------------|--------|--------|
    | assert_range | design.sv(31) |      0 |      2 |
    | assert_max   | design.sv(33) |      0 |      1 |
    | assert_valid | design.sv(35) |      0 |    259 |
    ==================================================


    COVER COVERAGE
    ======================================
    |    Name     |    Source     | Hits |
    |-------------|---------------|------|
    | cover_C_max | design.sv(37) |    1 |
    ======================================


CLASS - /\package testbench_pkg\/adder_sequence : work.testbench_pkg/\testbench_pkg adder_sequence \


    SUMMARY
    =============================================
    |    Coverage Type    | Weight | Hits/Total |
    =============================================
    | Statement Coverage  |      1 |    56.250% |
    |---------------------|--------|------------|
    | Statements          |        |    18 / 32 |
    | Subprograms         |        |      3 / 7 |
    =============================================
    | Branch Coverage     |      1 |     8.333% |
    |---------------------|--------|------------|
    | Branch paths        |        |     1 / 12 |
    | Branches            |        |      0 / 6 |
    =============================================
    | Covergroup Coverage |      1 |   100.000% |
    |---------------------|--------|------------|
    | Types               |        |      1 / 1 |
    =============================================
    | Assertion Coverage  |      1 |   100.000% |
    |---------------------|--------|------------|
    | Assertions          |        |      2 / 2 |
    =============================================
    WEIGHTED AVERAGE LOCAL: 66.145%


    STATEMENT COVERAGE
    ==========================================================================================================================================================================
    | Line |                            Hits                             |                                        Source: sequence.sv                                        |
    |------|-------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
    | 1    |                                                             | import pkg::*;                                                                                    |
    | 2    |                                                             | class adder_sequence extends uvm_sequence;                                                        |
    | 3    | UNR,UNR,UNR,UNR,UNR,UNR,513,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(adder_sequence)                                                               |
    | 4    |                                                             |                                                                                                   |
    | 5    |                                                             |   adder_item #(G_DATA_WIDTH) sa_tx;                                                               |
    | 6    |                                                             |   covergroup cg;                                                                                  |
    | 7    |                                                             |     option.per_instance = 1;                                                                      |
    | 8    |                                                             |     a:   coverpoint sa_tx.i_A {                                                                   |
    | 9    |                                                             |           // automatically create separate bins for each possible value                           |
    | 10   |                                                             |               bins range[] = {[0:$]};                                                             |
    | 11   |                                                             |     }                                                                                             |
    | 12   |                                                             |     b:   coverpoint sa_tx.i_B {                                                                   |
    | 13   |                                                             |       // automatically create separate bins for each possible value                               |
    | 14   |                                                             |             bins range[] = {[0:$]};                                                               |
    | 15   |                                                             |     }                                                                                             |
    | 16   |                                                             |     aXb : cross a,b;                                                                              |
    | 17   |                                                             |   endgroup: cg                                                                                    |
    | 18   |                                                             |                                                                                                   |
    | 19   |                                                             |   function new(string name = "");                                                                 |
    | 20   |                              1                              |     super.new(name);                                                                              |
    | 21   |                              1                              |     cg = new();                                                                                   |
    | 22   |                                                             |   endfunction                                                                                     |
    | 23   |                                                             |                                                                                                   |
    | 24   |                                                             |   task body();                                                                                    |
    | 25   |                                                             |   real cvg = 0;                                                                                   |
    | 26   |                                                             |                                                                                                   |
    | 27   |                                                             |                                                                                                   |
    | 28   |                            1,256                            |     while(cg.get_coverage != 100.0) begin                                                         |
    | 29   |                             256                             |       sa_tx = adder_item #(G_DATA_WIDTH)::type_id::create("sa_tx");                               |
    | 30   |                             256                             |       cvg = cg.get_coverage();                                                                    |
    | 31   |                             256                             |       assert(sa_tx.randomize());                                                                  |
    | 32   |                             256                             |       cg.sample();                                                                                |
    | 33   |                          256,1267                           |       while (cg.get_coverage() == cvg) begin                                                      |
    | 34   |                            1267                             |         assert(sa_tx.randomize());                                                                |
    | 35   |                            1267                             |         cg.sample();                                                                              |
    | 36   |                                                             |       end                                                                                         |
    | 37   |                             256                             |       start_item(sa_tx);                                                                          |
    | 38   |                             256                             |       finish_item(sa_tx);                                                                         |
    | 39   |                         256,256,256                         |       `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW) |
    | 40   |                                                             |     end                                                                                           |
    | 41   |                                                             |   endtask                                                                                         |
    ==========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |     Source: sequence.sv     |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#3#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#39#1#      |  1/2 |
    |     if_branch        |  256 |
    |     all_false_branch |    0 |
    ===============================


    COVERGROUP COVERAGE
    ===================================================================================
    |                   Covergroup                    |   Hits   |  Goal /  | Status  |
    |                                                 |          | At Least |         |
    ===================================================================================
    | TYPE /\package testbench_pkg\/adder_sequence/cg | 100.000% | 100.000% | Covered |
    ===================================================================================
    | INSTANCE <UNNAMED1>                             | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | COVERPOINT <UNNAMED1>::a                        | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | bin range[0]                                    |      109 |        1 | Covered |
    | bin range[1]                                    |      116 |        1 | Covered |
    | bin range[2]                                    |       83 |        1 | Covered |
    | bin range[3]                                    |       87 |        1 | Covered |
    | bin range[4]                                    |       87 |        1 | Covered |
    | bin range[5]                                    |       98 |        1 | Covered |
    | bin range[6]                                    |       93 |        1 | Covered |
    | bin range[7]                                    |       89 |        1 | Covered |
    | bin range[8]                                    |       86 |        1 | Covered |
    | bin range[9]                                    |       95 |        1 | Covered |
    | bin range[10]                                   |       82 |        1 | Covered |
    | bin range[11]                                   |      100 |        1 | Covered |
    | bin range[12]                                   |      106 |        1 | Covered |
    | bin range[13]                                   |       98 |        1 | Covered |
    | bin range[14]                                   |      100 |        1 | Covered |
    | bin range[15]                                   |       94 |        1 | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | COVERPOINT <UNNAMED1>::b                        | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | bin range[0]                                    |      102 |        1 | Covered |
    | bin range[1]                                    |       78 |        1 | Covered |
    | bin range[2]                                    |      101 |        1 | Covered |
    | bin range[3]                                    |       90 |        1 | Covered |
    | bin range[4]                                    |      108 |        1 | Covered |
    | bin range[5]                                    |       98 |        1 | Covered |
    | bin range[6]                                    |       93 |        1 | Covered |
    | bin range[7]                                    |       93 |        1 | Covered |
    | bin range[8]                                    |       85 |        1 | Covered |
    | bin range[9]                                    |       81 |        1 | Covered |
    | bin range[10]                                   |       95 |        1 | Covered |
    | bin range[11]                                   |      104 |        1 | Covered |
    | bin range[12]                                   |       86 |        1 | Covered |
    | bin range[13]                                   |      103 |        1 | Covered |
    | bin range[14]                                   |      104 |        1 | Covered |
    | bin range[15]                                   |      102 |        1 | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | CROSS <UNNAMED1>::aXb                           | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | bin <range[0],range[0]>                         |        8 |        1 | Covered |
    | bin <range[0],range[1]>                         |        6 |        1 | Covered |
    | bin <range[0],range[2]>                         |        6 |        1 | Covered |
    | bin <range[0],range[3]>                         |        8 |        1 | Covered |
    | bin <range[0],range[4]>                         |        7 |        1 | Covered |
    | bin <range[0],range[5]>                         |        7 |        1 | Covered |
    | bin <range[0],range[6]>                         |        4 |        1 | Covered |
    | bin <range[0],range[7]>                         |        4 |        1 | Covered |
    | bin <range[0],range[8]>                         |       10 |        1 | Covered |
    | bin <range[0],range[9]>                         |        2 |        1 | Covered |
    | bin <range[0],range[10]>                        |        7 |        1 | Covered |
    | bin <range[0],range[11]>                        |        4 |        1 | Covered |
    | bin <range[0],range[12]>                        |        9 |        1 | Covered |
    | bin <range[0],range[13]>                        |        9 |        1 | Covered |
    | bin <range[0],range[14]>                        |       10 |        1 | Covered |
    | bin <range[0],range[15]>                        |        8 |        1 | Covered |
    | bin <range[1],range[0]>                         |        7 |        1 | Covered |
    | bin <range[1],range[1]>                         |        9 |        1 | Covered |
    | bin <range[1],range[2]>                         |        6 |        1 | Covered |
    | bin <range[1],range[3]>                         |        9 |        1 | Covered |
    | bin <range[1],range[4]>                         |        6 |        1 | Covered |
    | bin <range[1],range[5]>                         |        5 |        1 | Covered |
    | bin <range[1],range[6]>                         |        5 |        1 | Covered |
    | bin <range[1],range[7]>                         |       10 |        1 | Covered |
    | bin <range[1],range[8]>                         |        5 |        1 | Covered |
    | bin <range[1],range[9]>                         |        5 |        1 | Covered |
    | bin <range[1],range[10]>                        |        8 |        1 | Covered |
    | bin <range[1],range[11]>                        |        6 |        1 | Covered |
    | bin <range[1],range[12]>                        |        8 |        1 | Covered |
    | bin <range[1],range[13]>                        |       10 |        1 | Covered |
    | bin <range[1],range[14]>                        |        6 |        1 | Covered |
    | bin <range[1],range[15]>                        |       11 |        1 | Covered |
    | bin <range[2],range[0]>                         |       10 |        1 | Covered |
    | bin <range[2],range[1]>                         |        6 |        1 | Covered |
    | bin <range[2],range[2]>                         |        6 |        1 | Covered |
    | bin <range[2],range[3]>                         |        9 |        1 | Covered |
    | bin <range[2],range[4]>                         |        9 |        1 | Covered |
    | bin <range[2],range[5]>                         |        6 |        1 | Covered |
    | bin <range[2],range[6]>                         |        3 |        1 | Covered |
    | bin <range[2],range[7]>                         |        1 |        1 | Covered |
    | bin <range[2],range[8]>                         |        3 |        1 | Covered |
    | bin <range[2],range[9]>                         |        3 |        1 | Covered |
    | bin <range[2],range[10]>                        |        3 |        1 | Covered |
    | bin <range[2],range[11]>                        |        3 |        1 | Covered |
    | bin <range[2],range[12]>                        |        6 |        1 | Covered |
    | bin <range[2],range[13]>                        |        2 |        1 | Covered |
    | bin <range[2],range[14]>                        |        5 |        1 | Covered |
    | bin <range[2],range[15]>                        |        8 |        1 | Covered |
    | bin <range[3],range[0]>                         |        4 |        1 | Covered |
    | bin <range[3],range[1]>                         |        2 |        1 | Covered |
    | bin <range[3],range[2]>                         |       10 |        1 | Covered |
    | bin <range[3],range[3]>                         |        1 |        1 | Covered |
    | bin <range[3],range[4]>                         |        5 |        1 | Covered |
    | bin <range[3],range[5]>                         |        2 |        1 | Covered |
    | bin <range[3],range[6]>                         |        6 |        1 | Covered |
    | bin <range[3],range[7]>                         |        9 |        1 | Covered |
    | bin <range[3],range[8]>                         |        6 |        1 | Covered |
    | bin <range[3],range[9]>                         |        9 |        1 | Covered |
    | bin <range[3],range[10]>                        |        9 |        1 | Covered |
    | bin <range[3],range[11]>                        |        6 |        1 | Covered |
    | bin <range[3],range[12]>                        |        4 |        1 | Covered |
    | bin <range[3],range[13]>                        |        4 |        1 | Covered |
    | bin <range[3],range[14]>                        |        5 |        1 | Covered |
    | bin <range[3],range[15]>                        |        5 |        1 | Covered |
    | bin <range[4],range[0]>                         |        5 |        1 | Covered |
    | bin <range[4],range[1]>                         |        4 |        1 | Covered |
    | bin <range[4],range[2]>                         |        6 |        1 | Covered |
    | bin <range[4],range[3]>                         |        5 |        1 | Covered |
    | bin <range[4],range[4]>                         |       10 |        1 | Covered |
    | bin <range[4],range[5]>                         |       11 |        1 | Covered |
    | bin <range[4],range[6]>                         |        2 |        1 | Covered |
    | bin <range[4],range[7]>                         |        5 |        1 | Covered |
    | bin <range[4],range[8]>                         |        4 |        1 | Covered |
    | bin <range[4],range[9]>                         |        5 |        1 | Covered |
    | bin <range[4],range[10]>                        |        4 |        1 | Covered |
    | bin <range[4],range[11]>                        |        8 |        1 | Covered |
    | bin <range[4],range[12]>                        |        4 |        1 | Covered |
    | bin <range[4],range[13]>                        |        4 |        1 | Covered |
    | bin <range[4],range[14]>                        |        3 |        1 | Covered |
    | bin <range[4],range[15]>                        |        7 |        1 | Covered |
    | bin <range[5],range[0]>                         |        6 |        1 | Covered |
    | bin <range[5],range[1]>                         |        9 |        1 | Covered |
    | bin <range[5],range[2]>                         |        6 |        1 | Covered |
    | bin <range[5],range[3]>                         |        8 |        1 | Covered |
    | bin <range[5],range[4]>                         |        5 |        1 | Covered |
    | bin <range[5],range[5]>                         |        9 |        1 | Covered |
    | bin <range[5],range[6]>                         |        6 |        1 | Covered |
    | bin <range[5],range[7]>                         |        5 |        1 | Covered |
    | bin <range[5],range[8]>                         |        3 |        1 | Covered |
    | bin <range[5],range[9]>                         |        4 |        1 | Covered |
    | bin <range[5],range[10]>                        |        5 |        1 | Covered |
    | bin <range[5],range[11]>                        |        7 |        1 | Covered |
    | bin <range[5],range[12]>                        |        5 |        1 | Covered |
    | bin <range[5],range[13]>                        |        5 |        1 | Covered |
    | bin <range[5],range[14]>                        |        6 |        1 | Covered |
    | bin <range[5],range[15]>                        |        9 |        1 | Covered |
    | bin <range[6],range[0]>                         |        7 |        1 | Covered |
    | bin <range[6],range[1]>                         |        5 |        1 | Covered |
    | bin <range[6],range[2]>                         |        9 |        1 | Covered |
    | bin <range[6],range[3]>                         |        5 |        1 | Covered |
    | bin <range[6],range[4]>                         |        3 |        1 | Covered |
    | bin <range[6],range[5]>                         |        2 |        1 | Covered |
    | bin <range[6],range[6]>                         |        6 |        1 | Covered |
    | bin <range[6],range[7]>                         |        7 |        1 | Covered |
    | bin <range[6],range[8]>                         |        7 |        1 | Covered |
    | bin <range[6],range[9]>                         |        4 |        1 | Covered |
    | bin <range[6],range[10]>                        |        4 |        1 | Covered |
    | bin <range[6],range[11]>                        |       10 |        1 | Covered |
    | bin <range[6],range[12]>                        |        3 |        1 | Covered |
    | bin <range[6],range[13]>                        |       10 |        1 | Covered |
    | bin <range[6],range[14]>                        |        6 |        1 | Covered |
    | bin <range[6],range[15]>                        |        5 |        1 | Covered |
    | bin <range[7],range[0]>                         |       12 |        1 | Covered |
    | bin <range[7],range[1]>                         |        5 |        1 | Covered |
    | bin <range[7],range[2]>                         |        5 |        1 | Covered |
    | bin <range[7],range[3]>                         |        3 |        1 | Covered |
    | bin <range[7],range[4]>                         |        7 |        1 | Covered |
    | bin <range[7],range[5]>                         |        9 |        1 | Covered |
    | bin <range[7],range[6]>                         |        6 |        1 | Covered |
    | bin <range[7],range[7]>                         |        7 |        1 | Covered |
    | bin <range[7],range[8]>                         |        6 |        1 | Covered |
    | bin <range[7],range[9]>                         |        6 |        1 | Covered |
    | bin <range[7],range[10]>                        |        3 |        1 | Covered |
    | bin <range[7],range[11]>                        |        3 |        1 | Covered |
    | bin <range[7],range[12]>                        |        5 |        1 | Covered |
    | bin <range[7],range[13]>                        |        6 |        1 | Covered |
    | bin <range[7],range[14]>                        |        5 |        1 | Covered |
    | bin <range[7],range[15]>                        |        1 |        1 | Covered |
    | bin <range[8],range[0]>                         |        6 |        1 | Covered |
    | bin <range[8],range[1]>                         |        3 |        1 | Covered |
    | bin <range[8],range[2]>                         |       10 |        1 | Covered |
    | bin <range[8],range[3]>                         |        3 |        1 | Covered |
    | bin <range[8],range[4]>                         |        4 |        1 | Covered |
    | bin <range[8],range[5]>                         |        6 |        1 | Covered |
    | bin <range[8],range[6]>                         |        7 |        1 | Covered |
    | bin <range[8],range[7]>                         |        1 |        1 | Covered |
    | bin <range[8],range[8]>                         |        7 |        1 | Covered |
    | bin <range[8],range[9]>                         |        5 |        1 | Covered |
    | bin <range[8],range[10]>                        |        4 |        1 | Covered |
    | bin <range[8],range[11]>                        |       11 |        1 | Covered |
    | bin <range[8],range[12]>                        |        3 |        1 | Covered |
    | bin <range[8],range[13]>                        |        4 |        1 | Covered |
    | bin <range[8],range[14]>                        |        9 |        1 | Covered |
    | bin <range[8],range[15]>                        |        3 |        1 | Covered |
    | bin <range[9],range[0]>                         |       11 |        1 | Covered |
    | bin <range[9],range[1]>                         |        6 |        1 | Covered |
    | bin <range[9],range[2]>                         |        2 |        1 | Covered |
    | bin <range[9],range[3]>                         |        8 |        1 | Covered |
    | bin <range[9],range[4]>                         |        7 |        1 | Covered |
    | bin <range[9],range[5]>                         |        7 |        1 | Covered |
    | bin <range[9],range[6]>                         |        6 |        1 | Covered |
    | bin <range[9],range[7]>                         |        5 |        1 | Covered |
    | bin <range[9],range[8]>                         |        3 |        1 | Covered |
    | bin <range[9],range[9]>                         |        7 |        1 | Covered |
    | bin <range[9],range[10]>                        |        7 |        1 | Covered |
    | bin <range[9],range[11]>                        |        2 |        1 | Covered |
    | bin <range[9],range[12]>                        |        8 |        1 | Covered |
    | bin <range[9],range[13]>                        |        5 |        1 | Covered |
    | bin <range[9],range[14]>                        |        6 |        1 | Covered |
    | bin <range[9],range[15]>                        |        5 |        1 | Covered |
    | bin <range[10],range[0]>                        |        6 |        1 | Covered |
    | bin <range[10],range[1]>                        |        5 |        1 | Covered |
    | bin <range[10],range[2]>                        |        3 |        1 | Covered |
    | bin <range[10],range[3]>                        |        7 |        1 | Covered |
    | bin <range[10],range[4]>                        |        3 |        1 | Covered |
    | bin <range[10],range[5]>                        |        6 |        1 | Covered |
    | bin <range[10],range[6]>                        |        6 |        1 | Covered |
    | bin <range[10],range[7]>                        |        4 |        1 | Covered |
    | bin <range[10],range[8]>                        |        4 |        1 | Covered |
    | bin <range[10],range[9]>                        |        6 |        1 | Covered |
    | bin <range[10],range[10]>                       |        5 |        1 | Covered |
    | bin <range[10],range[11]>                       |        6 |        1 | Covered |
    | bin <range[10],range[12]>                       |        4 |        1 | Covered |
    | bin <range[10],range[13]>                       |        9 |        1 | Covered |
    | bin <range[10],range[14]>                       |        6 |        1 | Covered |
    | bin <range[10],range[15]>                       |        2 |        1 | Covered |
    | bin <range[11],range[0]>                        |        2 |        1 | Covered |
    | bin <range[11],range[1]>                        |        4 |        1 | Covered |
    | bin <range[11],range[2]>                        |        6 |        1 | Covered |
    | bin <range[11],range[3]>                        |        2 |        1 | Covered |
    | bin <range[11],range[4]>                        |       12 |        1 | Covered |
    | bin <range[11],range[5]>                        |        3 |        1 | Covered |
    | bin <range[11],range[6]>                        |       12 |        1 | Covered |
    | bin <range[11],range[7]>                        |        7 |        1 | Covered |
    | bin <range[11],range[8]>                        |        4 |        1 | Covered |
    | bin <range[11],range[9]>                        |        6 |        1 | Covered |
    | bin <range[11],range[10]>                       |        5 |        1 | Covered |
    | bin <range[11],range[11]>                       |        8 |        1 | Covered |
    | bin <range[11],range[12]>                       |        5 |        1 | Covered |
    | bin <range[11],range[13]>                       |        6 |        1 | Covered |
    | bin <range[11],range[14]>                       |        8 |        1 | Covered |
    | bin <range[11],range[15]>                       |       10 |        1 | Covered |
    | bin <range[12],range[0]>                        |        7 |        1 | Covered |
    | bin <range[12],range[1]>                        |        5 |        1 | Covered |
    | bin <range[12],range[2]>                        |        4 |        1 | Covered |
    | bin <range[12],range[3]>                        |        2 |        1 | Covered |
    | bin <range[12],range[4]>                        |        7 |        1 | Covered |
    | bin <range[12],range[5]>                        |        5 |        1 | Covered |
    | bin <range[12],range[6]>                        |        4 |        1 | Covered |
    | bin <range[12],range[7]>                        |       10 |        1 | Covered |
    | bin <range[12],range[8]>                        |        7 |        1 | Covered |
    | bin <range[12],range[9]>                        |        7 |        1 | Covered |
    | bin <range[12],range[10]>                       |        6 |        1 | Covered |
    | bin <range[12],range[11]>                       |        5 |        1 | Covered |
    | bin <range[12],range[12]>                       |       10 |        1 | Covered |
    | bin <range[12],range[13]>                       |        6 |        1 | Covered |
    | bin <range[12],range[14]>                       |       10 |        1 | Covered |
    | bin <range[12],range[15]>                       |       11 |        1 | Covered |
    | bin <range[13],range[0]>                        |        4 |        1 | Covered |
    | bin <range[13],range[1]>                        |        3 |        1 | Covered |
    | bin <range[13],range[2]>                        |       10 |        1 | Covered |
    | bin <range[13],range[3]>                        |        3 |        1 | Covered |
    | bin <range[13],range[4]>                        |        7 |        1 | Covered |
    | bin <range[13],range[5]>                        |        8 |        1 | Covered |
    | bin <range[13],range[6]>                        |       11 |        1 | Covered |
    | bin <range[13],range[7]>                        |        2 |        1 | Covered |
    | bin <range[13],range[8]>                        |        9 |        1 | Covered |
    | bin <range[13],range[9]>                        |        3 |        1 | Covered |
    | bin <range[13],range[10]>                       |       10 |        1 | Covered |
    | bin <range[13],range[11]>                       |        7 |        1 | Covered |
    | bin <range[13],range[12]>                       |        3 |        1 | Covered |
    | bin <range[13],range[13]>                       |        9 |        1 | Covered |
    | bin <range[13],range[14]>                       |        4 |        1 | Covered |
    | bin <range[13],range[15]>                       |        5 |        1 | Covered |
    | bin <range[14],range[0]>                        |        3 |        1 | Covered |
    | bin <range[14],range[1]>                        |        1 |        1 | Covered |
    | bin <range[14],range[2]>                        |        7 |        1 | Covered |
    | bin <range[14],range[3]>                        |        9 |        1 | Covered |
    | bin <range[14],range[4]>                        |       11 |        1 | Covered |
    | bin <range[14],range[5]>                        |        8 |        1 | Covered |
    | bin <range[14],range[6]>                        |        5 |        1 | Covered |
    | bin <range[14],range[7]>                        |        3 |        1 | Covered |
    | bin <range[14],range[8]>                        |        5 |        1 | Covered |
    | bin <range[14],range[9]>                        |        4 |        1 | Covered |
    | bin <range[14],range[10]>                       |        4 |        1 | Covered |
    | bin <range[14],range[11]>                       |       11 |        1 | Covered |
    | bin <range[14],range[12]>                       |        5 |        1 | Covered |
    | bin <range[14],range[13]>                       |       10 |        1 | Covered |
    | bin <range[14],range[14]>                       |        7 |        1 | Covered |
    | bin <range[14],range[15]>                       |        7 |        1 | Covered |
    | bin <range[15],range[0]>                        |        4 |        1 | Covered |
    | bin <range[15],range[1]>                        |        5 |        1 | Covered |
    | bin <range[15],range[2]>                        |        5 |        1 | Covered |
    | bin <range[15],range[3]>                        |        8 |        1 | Covered |
    | bin <range[15],range[4]>                        |        5 |        1 | Covered |
    | bin <range[15],range[5]>                        |        4 |        1 | Covered |
    | bin <range[15],range[6]>                        |        4 |        1 | Covered |
    | bin <range[15],range[7]>                        |       13 |        1 | Covered |
    | bin <range[15],range[8]>                        |        2 |        1 | Covered |
    | bin <range[15],range[9]>                        |        5 |        1 | Covered |
    | bin <range[15],range[10]>                       |       11 |        1 | Covered |
    | bin <range[15],range[11]>                       |        7 |        1 | Covered |
    | bin <range[15],range[12]>                       |        4 |        1 | Covered |
    | bin <range[15],range[13]>                       |        4 |        1 | Covered |
    | bin <range[15],range[14]>                       |        8 |        1 | Covered |
    | bin <range[15],range[15]>                       |        5 |        1 | Covered |
    ===================================================================================


    ASSERTION COVERAGE
    =======================================================
    |      Name       |     Source      | Failed | Passed |
    |-----------------|-----------------|--------|--------|
    | @IMM_ASSERT#31@ | sequence.sv(31) |      0 |    256 |
    | @IMM_ASSERT#34@ | sequence.sv(34) |      0 |   1267 |
    =======================================================


CLASS - /\package testbench_pkg\/adder_driver : work.testbench_pkg/\testbench_pkg adder_driver \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    85.000% |
    |--------------------|--------|------------|
    | Statements         |        |    17 / 20 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 92.500%


    STATEMENT COVERAGE
    =======================================================================================================================================
    | Line |    Hits     |                                               Source: driver.sv                                                |
    |------|-------------|----------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                 |
    | 2    |             | class adder_driver extends uvm_driver #(adder_item #(G_DATA_WIDTH));                                           |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_driver)                                                                           |
    | 4    |             |                                                                                                                |
    | 5    |             |   virtual adder_intf intf;                                                                                     |
    | 6    |             |                                                                                                                |
    | 7    |             |   function new (string name = "", uvm_component parent);                                                       |
    | 8    |      1      |     super.new(name,parent);                                                                                    |
    | 9    |             |   endfunction                                                                                                  |
    | 10   |             |                                                                                                                |
    | 11   |             |   function void build_phase(uvm_phase phase);                                                                  |
    | 12   |      1      |     super.build_phase(phase);                                                                                  |
    | 13   |      1      |     void'(uvm_resource_db#(virtual adder_intf)::read_by_name(.scope("ifs"), .name("adder_intf"), .val(intf))); |
    | 14   |             |   endfunction                                                                                                  |
    | 15   |             |                                                                                                                |
    | 16   |             |                                                                                                                |
    | 17   |             |   virtual task reset_phase(uvm_phase phase);                                                                   |
    | 18   |      1      |     phase.raise_objection(this);                                                                               |
    | 19   |      1      |     intf.i_rst = 1'b1;                                                                                         |
    | 20   |      1      |     repeat(5)                                                                                                  |
    | 21   |             |       @(posedge intf.i_clk)                                                                                    |
    | 22   |      5      |     intf.i_rst = 1'b0;                                                                                         |
    | 23   |             |                                                                                                                |
    | 24   |      1      |     phase.drop_objection(this);                                                                                |
    | 25   |             |   endtask: reset_phase                                                                                         |
    | 26   |             |                                                                                                                |
    | 27   |             |   virtual task run_phase(uvm_phase phase);                                                                     |
    | 28   |             |     adder_item #(G_DATA_WIDTH) req_item;                                                                       |
    | 29   |             |                                                                                                                |
    | 30   |      1      |     forever begin                                                                                              |
    | 31   |     259     |       if(!intf.i_rst) begin                                                                                    |
    | 32   |     257     |         seq_item_port.get_next_item(req_item);                                                                 |
    | 33   |             |                                                                                                                |
    | 34   |     256     |         intf.i_valid = 1'b1;                                                                                   |
    | 35   |     256     |         intf.i_A = req_item.i_A;                                                                               |
    | 36   |     256     |         intf.i_B = req_item.i_B;                                                                               |
    | 37   |     256     |         @(posedge intf.i_clk);                                                                                 |
    | 38   |     256     |         seq_item_port.item_done();                                                                             |
    | 39   |             |       end else                                                                                                 |
    | 40   |      2      |         @(posedge intf.i_clk);                                                                                 |
    | 41   |             |     end                                                                                                        |
    | 42   |             |   endtask                                                                                                      |
    =======================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: driver.sv    |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#31#1# |  2/2 |
    |     if_branch   |  257 |
    |     else_branch |    2 |
    ==========================


CLASS - /\package testbench_pkg\/adder_monitor_in : work.testbench_pkg/\testbench_pkg adder_monitor_in \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    80.000% |
    |--------------------|--------|------------|
    | Statements         |        |    12 / 15 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 90.000%


    STATEMENT COVERAGE
    ========================================================================================================================================
    | Line |    Hits     |                                               Source: monitor.sv                                                |
    |------|-------------|-----------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                  |
    | 2    |             | class adder_monitor_in extends uvm_monitor;                                                                     |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_monitor_in)                                                                        |
    | 4    |             |                                                                                                                 |
    | 5    |             |   uvm_analysis_port #(adder_item #(G_DATA_WIDTH)) mon_in;                                                       |
    | 6    |             |   adder_item #(G_DATA_WIDTH) datum;                                                                             |
    | 7    |             |   virtual adder_intf intf;                                                                                      |
    | 8    |             |                                                                                                                 |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                        |
    | 10   |      1      |     super.new(name,parent);                                                                                     |
    | 11   |             |   endfunction : new                                                                                             |
    | 12   |             |                                                                                                                 |
    | 13   |             |                                                                                                                 |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                   |
    | 15   |      1      |     super.build_phase(phase);                                                                                   |
    | 16   |      1      |     void'(uvm_resource_db#(virtual adder_intf)::read_by_name(.scope("ifs"), .name("adder_intf"), .val(intf)));  |
    | 17   |             |                                                                                                                 |
    | 18   |             |                                                                                                                 |
    | 19   |      1      |     mon_in = new ("mon_in",this);                                                                               |
    | 20   |             |   endfunction: build_phase                                                                                      |
    | 21   |             |                                                                                                                 |
    | 22   |             |   virtual task run_phase(uvm_phase phase);                                                                      |
    | 23   |      1      |     forever begin                                                                                               |
    | 24   |     264     |       if(intf.i_valid && !intf.i_rst) begin                                                                     |
    | 25   |     261     |         datum = adder_item #(G_DATA_WIDTH)::type_id::create("datum",this);                                      |
    | 26   |     261     |         datum.i_A <= intf.i_A;                                                                                  |
    | 27   |     261     |         datum.i_B <= intf.i_B;                                                                                  |
    | 28   |     261     |         @(posedge intf.i_clk);                                                                                  |
    | 29   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR IN  i_A=0x%0h, i_B=0x%0h",datum.i_A,datum.i_B),UVM_LOW) |
    | 30   |     260     |         mon_in.write(datum);                                                                                    |
    | 31   |             |       end else                                                                                                  |
    | 32   |      3      |         @(posedge intf.i_clk);                                                                                  |
    | 33   |             |     end                                                                                                         |
    | 34   |             |   endtask : run_phase                                                                                           |
    ========================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: monitor.sv   |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#24#1# |  2/2 |
    |     if_branch   |  261 |
    |     else_branch |    3 |
    ==========================


CLASS - /\package testbench_pkg\/adder_monitor_out : work.testbench_pkg/\testbench_pkg adder_monitor_out \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 89.285%


    STATEMENT COVERAGE
    =======================================================================================================================================
    | Line |    Hits     |                                             Source: monitor_out.sv                                             |
    |------|-------------|----------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                 |
    | 2    |             | class adder_monitor_out extends uvm_monitor;                                                                   |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_monitor_out)                                                                      |
    | 4    |             |                                                                                                                |
    | 5    |             |   uvm_analysis_port #(adder_item #(G_DATA_WIDTH)) mon_out;                                                     |
    | 6    |             |   virtual adder_intf intf;                                                                                     |
    | 7    |             |   adder_item #(G_DATA_WIDTH) datum;                                                                            |
    | 8    |             |                                                                                                                |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                       |
    | 10   |      1      |     super.new(name,parent);                                                                                    |
    | 11   |             |   endfunction : new                                                                                            |
    | 12   |             |                                                                                                                |
    | 13   |             |                                                                                                                |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                  |
    | 15   |      1      |     super.build_phase(phase);                                                                                  |
    | 16   |      1      |     void'(uvm_resource_db#(virtual adder_intf)::read_by_name(.scope("ifs"), .name("adder_intf"), .val(intf))); |
    | 17   |             |                                                                                                                |
    | 18   |      1      |     mon_out = new ("mon_out",this);                                                                            |
    | 19   |             |   endfunction: build_phase                                                                                     |
    | 20   |             |                                                                                                                |
    | 21   |             |   virtual task run_phase(uvm_phase phase);                                                                     |
    | 22   |             |                                                                                                                |
    | 23   |      1      |     forever begin                                                                                              |
    | 24   |     264     |       if(intf.o_valid) begin                                                                                   |
    | 25   |     260     |         datum = adder_item #(G_DATA_WIDTH)::type_id::create("datum",this);                                     |
    | 26   |     260     |         datum.o_C <= intf.o_C;                                                                                 |
    | 27   |     260     |         @(posedge intf.i_clk);                                                                                 |
    | 28   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR OUT  o_C=0x%0h",datum.o_C),UVM_LOW)                    |
    | 29   |     259     |         mon_out.write(datum);                                                                                  |
    | 30   |             |       end else                                                                                                 |
    | 31   |      4      |         @(posedge intf.i_clk);                                                                                 |
    | 32   |             |     end                                                                                                        |
    | 33   |             |   endtask : run_phase                                                                                          |
    =======================================================================================================================================


    BRANCH COVERAGE
    =============================
    |  Source: monitor_out.sv   |
    =============================
    | Branch/Line     |  Hits   |
    =============================
    | IF branch#24#1# |     2/2 |
    |     if_branch   |     260 |
    |     else_branch |       4 |
    =============================


CLASS - /\package testbench_pkg\/adder_scoreboard : work.testbench_pkg/\testbench_pkg adder_scoreboard \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    80.769% |
    |--------------------|--------|------------|
    | Statements         |        |    21 / 26 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |    33.333% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 6 |
    | Branches           |        |      0 / 3 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 57.051%


    STATEMENT COVERAGE
    ====================================================================================================================================================================
    | Line |    Hits     |                                                            Source: scoreboard.sv                                                            |
    |------|-------------|---------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                              |
    | 2    |             | class adder_scoreboard extends uvm_scoreboard;                                                                                              |
    | 3    | UNR,UNR,518 |   `uvm_component_utils(adder_scoreboard)                                                                                                    |
    | 4    |             |                                                                                                                                             |
    | 5    |             |   function new(string name = "", uvm_component parent);                                                                                     |
    | 6    |      1      |     super.new(name,parent);                                                                                                                 |
    | 7    |             |   endfunction : new                                                                                                                         |
    | 8    |             |                                                                                                                                             |
    | 9    |             |   uvm_tlm_analysis_fifo #(adder_item #(G_DATA_WIDTH)) fifo_in;                                                                              |
    | 10   |             |   uvm_tlm_analysis_fifo #(adder_item #(G_DATA_WIDTH)) fifo_out;                                                                             |
    | 11   |             |                                                                                                                                             |
    | 12   |             |   uvm_get_port #(adder_item #(G_DATA_WIDTH)) data_get_port;                                                                                 |
    | 13   |             |   uvm_get_port #(adder_item #(G_DATA_WIDTH)) result_get_port;                                                                               |
    | 14   |             |                                                                                                                                             |
    | 15   |             |   adder_item #(G_DATA_WIDTH) in;                                                                                                            |
    | 16   |             |   adder_item #(G_DATA_WIDTH) out;                                                                                                           |
    | 17   |             |                                                                                                                                             |
    | 18   |             |   function void build_phase (uvm_phase phase);                                                                                              |
    | 19   |      1      |     super.build_phase(phase);                                                                                                               |
    | 20   |             |                                                                                                                                             |
    | 21   |      1      |     fifo_in = new("fifo_in",this);                                                                                                          |
    | 22   |      1      |     fifo_out = new("fifo_out",this);                                                                                                        |
    | 23   |             |                                                                                                                                             |
    | 24   |      1      |     data_get_port = new("data_get_port",this);                                                                                              |
    | 25   |      1      |     result_get_port = new("result_get_port",this);                                                                                          |
    | 26   |             |   endfunction : build_phase                                                                                                                 |
    | 27   |             |                                                                                                                                             |
    | 28   |             |   function void connect_phase(uvm_phase phase);                                                                                             |
    | 29   |      1      |     super.connect_phase(phase);                                                                                                             |
    | 30   |      1      |     data_get_port.connect(fifo_in.get_export);                                                                                              |
    | 31   |      1      |     result_get_port.connect(fifo_out.get_export);                                                                                           |
    | 32   |             |   endfunction : connect_phase                                                                                                               |
    | 33   |             |                                                                                                                                             |
    | 34   |             |   function void check_phase(uvm_phase phase);                                                                                               |
    | 35   |      1      |     super.check_phase(phase);                                                                                                               |
    | 36   |             |                                                                                                                                             |
    | 37   |    1,259    |     while(result_get_port.can_get()) begin                                                                                                  |
    | 38   |     259     |       in  = adder_item #(G_DATA_WIDTH)::type_id::create("in",this);                                                                         |
    | 39   |     259     |       out = adder_item #(G_DATA_WIDTH)::type_id::create("out",this);                                                                        |
    | 40   |             |                                                                                                                                             |
    | 41   |     259     |       result_get_port.try_get(out);                                                                                                         |
    | 42   |     259     |       data_get_port.try_get(in);                                                                                                            |
    | 43   |             |                                                                                                                                             |
    | 44   |     259     |       if(in.i_A + in.i_B != out.o_C)                                                                                                        |
    | 45   |    0,0,0    |         `uvm_error(get_type_name(),$sformatf("FAIL i_A=0x%0h, i_B=0x%0h, o_C=0x%0h, exp=0x%0h",in.i_A,in.i_B,out.o_C,in.i_A+in.i_B))        |
    | 46   |             |       else                                                                                                                                  |
    | 47   | 259,259,259 |         `uvm_info(get_type_name(),$sformatf("PASS i_A=0x%0h, i_B=0x%0h, o_C=0x%0h, exp=0x%0h",in.i_A,in.i_B,out.o_C,in.i_A+in.i_B),UVM_LOW) |
    | 48   |             |     end                                                                                                                                     |
    | 49   |             |   endfunction : check_phase                                                                                                                 |
    ====================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |    Source: scoreboard.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#44#1#      |  1/2 |
    |     if_branch        |    0 |
    |     else_branch      |  259 |
    |----------------------|------|
    | IF branch#45#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#47#1#      |  1/2 |
    |     if_branch        |  259 |
    |     all_false_branch |    0 |
    ===============================


CLASS - /\package testbench_pkg\/adder_env : work.testbench_pkg/\testbench_pkg adder_env \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 78.571%


    STATEMENT COVERAGE
    ==============================================================================================================
    | Line |    Hits     |                                    Source: env.sv                                     |
    |------|-------------|---------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                        |
    | 2    |             | class adder_env extends uvm_env;                                                      |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_env)                                                     |
    | 4    |             |                                                                                       |
    | 5    |             |   uvm_sequencer #(adder_item #(G_DATA_WIDTH)) seqr;                                   |
    | 6    |             |   adder_driver drv;                                                                   |
    | 7    |             |   adder_monitor_out res_mon;                                                          |
    | 8    |             |   adder_monitor_in data_mon;                                                          |
    | 9    |             |   adder_scoreboard scb;                                                               |
    | 10   |             |                                                                                       |
    | 11   |             |   function new (string name = "", uvm_component parent);                              |
    | 12   |      1      |     super.new(name,parent);                                                           |
    | 13   |             |   endfunction : new                                                                   |
    | 14   |             |                                                                                       |
    | 15   |             |   function void build_phase(uvm_phase phase);                                         |
    | 16   |      1      |     super.build_phase(phase);                                                         |
    | 17   |      1      |     seqr = uvm_sequencer #(adder_item #(G_DATA_WIDTH))::type_id::create("seqr",this); |
    | 18   |             |                                                                                       |
    | 19   |      1      |     drv = adder_driver::type_id::create("drv",this);                                  |
    | 20   |      1      |     res_mon = adder_monitor_out::type_id::create("res_mon",this);                     |
    | 21   |      1      |     data_mon = adder_monitor_in::type_id::create("data_mon",this);                    |
    | 22   |      1      |     scb = adder_scoreboard::type_id::create("scb",this);                              |
    | 23   |             |   endfunction : build_phase                                                           |
    | 24   |             |                                                                                       |
    | 25   |             |   function void connect_phase(uvm_phase phase);                                       |
    | 26   |      1      |     super.connect_phase(phase);                                                       |
    | 27   |      1      |     drv.seq_item_port.connect(seqr.seq_item_export);                                  |
    | 28   |      1      |     data_mon.mon_in.connect(scb.fifo_in.analysis_export);                             |
    | 29   |      1      |     res_mon.mon_out.connect(scb.fifo_out.analysis_export);                            |
    | 30   |             |   endfunction : connect_phase                                                         |
    | 31   |             |                                                                                       |
    ==============================================================================================================


CLASS - /\package testbench_pkg\/adder_test : work.testbench_pkg/\testbench_pkg adder_test \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    81.818% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 11 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 81.818%


    STATEMENT COVERAGE
    ===============================================================================
    | Line |   Hits    |                     Source: test.sv                      |
    |------|-----------|----------------------------------------------------------|
    | 1    |           | class adder_test extends uvm_test;                       |
    | 2    | UNR,UNR,1 |   `uvm_component_utils(adder_test)                       |
    | 3    |           |                                                          |
    | 4    |           |   adder_env env;                                         |
    | 5    |           |   adder_sequence seq;                                    |
    | 6    |           |                                                          |
    | 7    |           |                                                          |
    | 8    |           |   function new (string name = "", uvm_component parent); |
    | 9    |     1     |     super.new(name,parent);                              |
    | 10   |           |   endfunction : new                                      |
    | 11   |           |                                                          |
    | 12   |           |                                                          |
    | 13   |           |   function void build_phase(uvm_phase phase);            |
    | 14   |     1     |     super.build_phase(phase);                            |
    | 15   |     1     |     env = adder_env::type_id::create("env",this);        |
    | 16   |           |   endfunction : build_phase                              |
    | 17   |           |                                                          |
    | 18   |           |   task run_phase(uvm_phase phase);                       |
    | 19   |     1     |     seq = adder_sequence::type_id::create("seq",this);   |
    | 20   |     1     |     phase.raise_objection(this);                         |
    | 21   |     1     |     seq.start(env.seqr);                                 |
    | 22   |           |                                                          |
    | 23   |     1     |     phase.phase_done.set_drain_time(this, 50ns);         |
    | 24   |     1     |     phase.drop_objection(this);                          |
    | 25   |           |                                                          |
    | 26   |           |   endtask : run_phase                                    |
    ===============================================================================


CLASS - /\package testbench_pkg\/@adder_item#(H4)@ : work.testbench_pkg/\testbench_pkg adder_item \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    12.500% |
    |--------------------|--------|------------|
    | Statements         |        |     2 / 16 |
    | Subprograms        |        |      2 / 6 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 6.250%


    STATEMENT COVERAGE
    ======================================================================================================================================================
    | Line |                            Hits                             |                           Source: sequence_item.sv                            |
    |------|-------------------------------------------------------------|-------------------------------------------------------------------------------|
    | 1    |                                                             | class adder_item #(parameter int G_DATA_WIDTH = 2) extends uvm_sequence_item; |
    | 2    | UNR,UNR,UNR,UNR,UNR,UNR,256,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(adder_item #(G_DATA_WIDTH))                               |
    | 3    |                                                             |                                                                               |
    | 4    |                                                             |   rand logic [G_DATA_WIDTH-1:0] i_A;                                          |
    | 5    |                                                             |   rand logic [G_DATA_WIDTH-1:0] i_B;                                          |
    | 6    |                                                             |   logic [G_DATA_WIDTH:0] o_C;                                                 |
    | 7    |                                                             |                                                                               |
    | 8    |                                                             |   function new(string name = "");                                             |
    | 9    |                            1295                             |     super.new(name);                                                          |
    | 10   |                                                             |   endfunction : new                                                           |
    | 11   |                                                             |                                                                               |
    ======================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |  Source: sequence_item.sv   |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#2#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


+++++++++++++++++++++++++++++++++++++++++++++
++++++++++       DESIGN UNITS      ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


CUMULATIVE SUMMARY
=============================================
|    Coverage Type    | Weight | Hits/Total |
=============================================
| Statement Coverage  |      1 |    70.807% |
|---------------------|--------|------------|
| Statements          |        |  114 / 161 |
| Subprograms         |        |    26 / 51 |
=============================================
| Branch Coverage     |      1 |    34.210% |
|---------------------|--------|------------|
| Branch paths        |        |    13 / 38 |
| Branches            |        |     5 / 19 |
=============================================
| Covergroup Coverage |      1 |   100.000% |
|---------------------|--------|------------|
| Types               |        |      1 / 1 |
=============================================
| Assertion Coverage  |      1 |   100.000% |
|---------------------|--------|------------|
| Assertions          |        |      5 / 5 |
| Covers              |        |      1 / 1 |
=============================================
CUMULATIVE DESIGN-BASED COVERAGE: 76.254%
COVERED DESIGN UNITS: 2 / 10
FILES: 10


MODULE - work.tb_top


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      6 / 6 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ========================================================================================================================================
    | Line | Hits |                                                  Source: testbench.sv                                                  |
    |------|------|------------------------------------------------------------------------------------------------------------------------|
    | 21   |      |     //Registers the Interface in the configuration block                                                               |
    | 22   |      |     //so that other blocks can use it                                                                                  |
    | 23   |  1   |     uvm_resource_db#(virtual adder_intf)::set(.scope("ifs"), .name("adder_intf"),                         .val(intf)); |
    | 24   |      |                                                                                                                        |
    | 25   |      |     //Executes the test                                                                                                |
    | 26   |  1   |     run_test("adder_test");                                                                                            |
    | 27   |      |   end                                                                                                                  |
    | 28   |      |                                                                                                                        |
    | 29   |      |   //Variable initialization                                                                                            |
    | 30   |      |   initial begin                                                                                                        |
    | 31   |  1   |     intf.i_clk = 1'b1;                                                                                                 |
    | 32   |      |     // Dump waves                                                                                                      |
    | 33   |  1   |     $dumpfile("dump.vcd");                                                                                             |
    | 34   |  1   |     $dumpvars(0, tb_top);                                                                                              |
    | 35   |      |   end                                                                                                                  |
    | 36   |      |                                                                                                                        |
    | 37   |      |   //Clock generation                                                                                                   |
    | 38   |      |   always                                                                                                               |
    | 39   | 526  |     #5 intf.i_clk = ~intf.i_clk;                                                                                       |
    | 40   |      | endmodule : tb_top                                                                                                     |
    ========================================================================================================================================


MODULE - work.adder


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      7 / 7 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      4 / 4 |
    | Branches           |        |      2 / 2 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      3 / 3 |
    | Covers             |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ==================================================================================
    | Line | Hits |                        Source: design.sv                         |
    |------|------|------------------------------------------------------------------|
    | 17   |      |                                                                  |
    | 18   |      |     always_ff @(posedge i_clk or posedge i_rst) begin : proc_add |
    | 19   | 265  |         if(i_rst) begin                                          |
    | 20   |  2   |             o_C <= '0;                                           |
    | 21   |  2   |             o_valid <= 1'b0;                                     |
    | 22   |      |         end else begin                                           |
    | 23   | 263  |             o_valid <= 1'b0;                                     |
    | 24   | 263  |             if(i_valid) begin                                    |
    | 25   | 261  |                 o_C <= i_A+i_B;                                  |
    | 26   | 261  |                 o_valid <= 1'b1;                                 |
    | 27   |      |             end                                                  |
    | 28   |      |         end                                                      |
    ==================================================================================


    BRANCH COVERAGE
    ===============================
    |      Source: design.sv      |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#19#1#      |  2/2 |
    |     if_branch        |    2 |
    |     else_branch      |  263 |
    |----------------------|------|
    | IF branch#24#1#      |  2/2 |
    |     if_branch        |  261 |
    |     all_false_branch |    2 |
    ===============================


    ASSERTION COVERAGE
    ==================================================
    |     Name     |    Source     | Failed | Passed |
    |--------------|---------------|--------|--------|
    | assert_range | design.sv(31) |      0 |      2 |
    | assert_max   | design.sv(33) |      0 |      1 |
    | assert_valid | design.sv(35) |      0 |    259 |
    ==================================================


    COVER COVERAGE
    ======================================
    |    Name     |    Source     | Hits |
    |-------------|---------------|------|
    | cover_C_max | design.sv(37) |    1 |
    ======================================


CLASS - work.testbench_pkg/\testbench_pkg adder_sequence \


    SUMMARY
    =============================================
    |    Coverage Type    | Weight | Hits/Total |
    =============================================
    | Statement Coverage  |      1 |    56.250% |
    |---------------------|--------|------------|
    | Statements          |        |    18 / 32 |
    | Subprograms         |        |      3 / 7 |
    =============================================
    | Branch Coverage     |      1 |     8.333% |
    |---------------------|--------|------------|
    | Branch paths        |        |     1 / 12 |
    | Branches            |        |      0 / 6 |
    =============================================
    | Covergroup Coverage |      1 |   100.000% |
    |---------------------|--------|------------|
    | Types               |        |      1 / 1 |
    =============================================
    | Assertion Coverage  |      1 |   100.000% |
    |---------------------|--------|------------|
    | Assertions          |        |      2 / 2 |
    =============================================
    WEIGHTED AVERAGE: 66.145%


    STATEMENT COVERAGE
    ==========================================================================================================================================================================
    | Line |                            Hits                             |                                        Source: sequence.sv                                        |
    |------|-------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
    | 1    |                                                             | import pkg::*;                                                                                    |
    | 2    |                                                             | class adder_sequence extends uvm_sequence;                                                        |
    | 3    | UNR,UNR,UNR,UNR,UNR,UNR,513,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(adder_sequence)                                                               |
    | 4    |                                                             |                                                                                                   |
    | 5    |                                                             |   adder_item #(G_DATA_WIDTH) sa_tx;                                                               |
    | 6    |                                                             |   covergroup cg;                                                                                  |
    | 7    |                                                             |     option.per_instance = 1;                                                                      |
    | 8    |                                                             |     a:   coverpoint sa_tx.i_A {                                                                   |
    | 9    |                                                             |           // automatically create separate bins for each possible value                           |
    | 10   |                                                             |               bins range[] = {[0:$]};                                                             |
    | 11   |                                                             |     }                                                                                             |
    | 12   |                                                             |     b:   coverpoint sa_tx.i_B {                                                                   |
    | 13   |                                                             |       // automatically create separate bins for each possible value                               |
    | 14   |                                                             |             bins range[] = {[0:$]};                                                               |
    | 15   |                                                             |     }                                                                                             |
    | 16   |                                                             |     aXb : cross a,b;                                                                              |
    | 17   |                                                             |   endgroup: cg                                                                                    |
    | 18   |                                                             |                                                                                                   |
    | 19   |                                                             |   function new(string name = "");                                                                 |
    | 20   |                              1                              |     super.new(name);                                                                              |
    | 21   |                              1                              |     cg = new();                                                                                   |
    | 22   |                                                             |   endfunction                                                                                     |
    | 23   |                                                             |                                                                                                   |
    | 24   |                                                             |   task body();                                                                                    |
    | 25   |                                                             |   real cvg = 0;                                                                                   |
    | 26   |                                                             |                                                                                                   |
    | 27   |                                                             |                                                                                                   |
    | 28   |                            1,256                            |     while(cg.get_coverage != 100.0) begin                                                         |
    | 29   |                             256                             |       sa_tx = adder_item #(G_DATA_WIDTH)::type_id::create("sa_tx");                               |
    | 30   |                             256                             |       cvg = cg.get_coverage();                                                                    |
    | 31   |                             256                             |       assert(sa_tx.randomize());                                                                  |
    | 32   |                             256                             |       cg.sample();                                                                                |
    | 33   |                          256,1267                           |       while (cg.get_coverage() == cvg) begin                                                      |
    | 34   |                            1267                             |         assert(sa_tx.randomize());                                                                |
    | 35   |                            1267                             |         cg.sample();                                                                              |
    | 36   |                                                             |       end                                                                                         |
    | 37   |                             256                             |       start_item(sa_tx);                                                                          |
    | 38   |                             256                             |       finish_item(sa_tx);                                                                         |
    | 39   |                         256,256,256                         |       `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW) |
    | 40   |                                                             |     end                                                                                           |
    | 41   |                                                             |   endtask                                                                                         |
    ==========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |     Source: sequence.sv     |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#3#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#39#1#      |  1/2 |
    |     if_branch        |  256 |
    |     all_false_branch |    0 |
    ===============================


    COVERGROUP COVERAGE
    ===================================================================================
    |                   Covergroup                    |   Hits   |  Goal /  | Status  |
    |                                                 |          | At Least |         |
    ===================================================================================
    | TYPE /\package testbench_pkg\/adder_sequence/cg | 100.000% | 100.000% | Covered |
    ===================================================================================
    | INSTANCE <UNNAMED1>                             | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | COVERPOINT <UNNAMED1>::a                        | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | bin range[0]                                    |      109 |        1 | Covered |
    | bin range[1]                                    |      116 |        1 | Covered |
    | bin range[2]                                    |       83 |        1 | Covered |
    | bin range[3]                                    |       87 |        1 | Covered |
    | bin range[4]                                    |       87 |        1 | Covered |
    | bin range[5]                                    |       98 |        1 | Covered |
    | bin range[6]                                    |       93 |        1 | Covered |
    | bin range[7]                                    |       89 |        1 | Covered |
    | bin range[8]                                    |       86 |        1 | Covered |
    | bin range[9]                                    |       95 |        1 | Covered |
    | bin range[10]                                   |       82 |        1 | Covered |
    | bin range[11]                                   |      100 |        1 | Covered |
    | bin range[12]                                   |      106 |        1 | Covered |
    | bin range[13]                                   |       98 |        1 | Covered |
    | bin range[14]                                   |      100 |        1 | Covered |
    | bin range[15]                                   |       94 |        1 | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | COVERPOINT <UNNAMED1>::b                        | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | bin range[0]                                    |      102 |        1 | Covered |
    | bin range[1]                                    |       78 |        1 | Covered |
    | bin range[2]                                    |      101 |        1 | Covered |
    | bin range[3]                                    |       90 |        1 | Covered |
    | bin range[4]                                    |      108 |        1 | Covered |
    | bin range[5]                                    |       98 |        1 | Covered |
    | bin range[6]                                    |       93 |        1 | Covered |
    | bin range[7]                                    |       93 |        1 | Covered |
    | bin range[8]                                    |       85 |        1 | Covered |
    | bin range[9]                                    |       81 |        1 | Covered |
    | bin range[10]                                   |       95 |        1 | Covered |
    | bin range[11]                                   |      104 |        1 | Covered |
    | bin range[12]                                   |       86 |        1 | Covered |
    | bin range[13]                                   |      103 |        1 | Covered |
    | bin range[14]                                   |      104 |        1 | Covered |
    | bin range[15]                                   |      102 |        1 | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | CROSS <UNNAMED1>::aXb                           | 100.000% | 100.000% | Covered |
    |-------------------------------------------------|----------|----------|---------|
    | bin <range[0],range[0]>                         |        8 |        1 | Covered |
    | bin <range[0],range[1]>                         |        6 |        1 | Covered |
    | bin <range[0],range[2]>                         |        6 |        1 | Covered |
    | bin <range[0],range[3]>                         |        8 |        1 | Covered |
    | bin <range[0],range[4]>                         |        7 |        1 | Covered |
    | bin <range[0],range[5]>                         |        7 |        1 | Covered |
    | bin <range[0],range[6]>                         |        4 |        1 | Covered |
    | bin <range[0],range[7]>                         |        4 |        1 | Covered |
    | bin <range[0],range[8]>                         |       10 |        1 | Covered |
    | bin <range[0],range[9]>                         |        2 |        1 | Covered |
    | bin <range[0],range[10]>                        |        7 |        1 | Covered |
    | bin <range[0],range[11]>                        |        4 |        1 | Covered |
    | bin <range[0],range[12]>                        |        9 |        1 | Covered |
    | bin <range[0],range[13]>                        |        9 |        1 | Covered |
    | bin <range[0],range[14]>                        |       10 |        1 | Covered |
    | bin <range[0],range[15]>                        |        8 |        1 | Covered |
    | bin <range[1],range[0]>                         |        7 |        1 | Covered |
    | bin <range[1],range[1]>                         |        9 |        1 | Covered |
    | bin <range[1],range[2]>                         |        6 |        1 | Covered |
    | bin <range[1],range[3]>                         |        9 |        1 | Covered |
    | bin <range[1],range[4]>                         |        6 |        1 | Covered |
    | bin <range[1],range[5]>                         |        5 |        1 | Covered |
    | bin <range[1],range[6]>                         |        5 |        1 | Covered |
    | bin <range[1],range[7]>                         |       10 |        1 | Covered |
    | bin <range[1],range[8]>                         |        5 |        1 | Covered |
    | bin <range[1],range[9]>                         |        5 |        1 | Covered |
    | bin <range[1],range[10]>                        |        8 |        1 | Covered |
    | bin <range[1],range[11]>                        |        6 |        1 | Covered |
    | bin <range[1],range[12]>                        |        8 |        1 | Covered |
    | bin <range[1],range[13]>                        |       10 |        1 | Covered |
    | bin <range[1],range[14]>                        |        6 |        1 | Covered |
    | bin <range[1],range[15]>                        |       11 |        1 | Covered |
    | bin <range[2],range[0]>                         |       10 |        1 | Covered |
    | bin <range[2],range[1]>                         |        6 |        1 | Covered |
    | bin <range[2],range[2]>                         |        6 |        1 | Covered |
    | bin <range[2],range[3]>                         |        9 |        1 | Covered |
    | bin <range[2],range[4]>                         |        9 |        1 | Covered |
    | bin <range[2],range[5]>                         |        6 |        1 | Covered |
    | bin <range[2],range[6]>                         |        3 |        1 | Covered |
    | bin <range[2],range[7]>                         |        1 |        1 | Covered |
    | bin <range[2],range[8]>                         |        3 |        1 | Covered |
    | bin <range[2],range[9]>                         |        3 |        1 | Covered |
    | bin <range[2],range[10]>                        |        3 |        1 | Covered |
    | bin <range[2],range[11]>                        |        3 |        1 | Covered |
    | bin <range[2],range[12]>                        |        6 |        1 | Covered |
    | bin <range[2],range[13]>                        |        2 |        1 | Covered |
    | bin <range[2],range[14]>                        |        5 |        1 | Covered |
    | bin <range[2],range[15]>                        |        8 |        1 | Covered |
    | bin <range[3],range[0]>                         |        4 |        1 | Covered |
    | bin <range[3],range[1]>                         |        2 |        1 | Covered |
    | bin <range[3],range[2]>                         |       10 |        1 | Covered |
    | bin <range[3],range[3]>                         |        1 |        1 | Covered |
    | bin <range[3],range[4]>                         |        5 |        1 | Covered |
    | bin <range[3],range[5]>                         |        2 |        1 | Covered |
    | bin <range[3],range[6]>                         |        6 |        1 | Covered |
    | bin <range[3],range[7]>                         |        9 |        1 | Covered |
    | bin <range[3],range[8]>                         |        6 |        1 | Covered |
    | bin <range[3],range[9]>                         |        9 |        1 | Covered |
    | bin <range[3],range[10]>                        |        9 |        1 | Covered |
    | bin <range[3],range[11]>                        |        6 |        1 | Covered |
    | bin <range[3],range[12]>                        |        4 |        1 | Covered |
    | bin <range[3],range[13]>                        |        4 |        1 | Covered |
    | bin <range[3],range[14]>                        |        5 |        1 | Covered |
    | bin <range[3],range[15]>                        |        5 |        1 | Covered |
    | bin <range[4],range[0]>                         |        5 |        1 | Covered |
    | bin <range[4],range[1]>                         |        4 |        1 | Covered |
    | bin <range[4],range[2]>                         |        6 |        1 | Covered |
    | bin <range[4],range[3]>                         |        5 |        1 | Covered |
    | bin <range[4],range[4]>                         |       10 |        1 | Covered |
    | bin <range[4],range[5]>                         |       11 |        1 | Covered |
    | bin <range[4],range[6]>                         |        2 |        1 | Covered |
    | bin <range[4],range[7]>                         |        5 |        1 | Covered |
    | bin <range[4],range[8]>                         |        4 |        1 | Covered |
    | bin <range[4],range[9]>                         |        5 |        1 | Covered |
    | bin <range[4],range[10]>                        |        4 |        1 | Covered |
    | bin <range[4],range[11]>                        |        8 |        1 | Covered |
    | bin <range[4],range[12]>                        |        4 |        1 | Covered |
    | bin <range[4],range[13]>                        |        4 |        1 | Covered |
    | bin <range[4],range[14]>                        |        3 |        1 | Covered |
    | bin <range[4],range[15]>                        |        7 |        1 | Covered |
    | bin <range[5],range[0]>                         |        6 |        1 | Covered |
    | bin <range[5],range[1]>                         |        9 |        1 | Covered |
    | bin <range[5],range[2]>                         |        6 |        1 | Covered |
    | bin <range[5],range[3]>                         |        8 |        1 | Covered |
    | bin <range[5],range[4]>                         |        5 |        1 | Covered |
    | bin <range[5],range[5]>                         |        9 |        1 | Covered |
    | bin <range[5],range[6]>                         |        6 |        1 | Covered |
    | bin <range[5],range[7]>                         |        5 |        1 | Covered |
    | bin <range[5],range[8]>                         |        3 |        1 | Covered |
    | bin <range[5],range[9]>                         |        4 |        1 | Covered |
    | bin <range[5],range[10]>                        |        5 |        1 | Covered |
    | bin <range[5],range[11]>                        |        7 |        1 | Covered |
    | bin <range[5],range[12]>                        |        5 |        1 | Covered |
    | bin <range[5],range[13]>                        |        5 |        1 | Covered |
    | bin <range[5],range[14]>                        |        6 |        1 | Covered |
    | bin <range[5],range[15]>                        |        9 |        1 | Covered |
    | bin <range[6],range[0]>                         |        7 |        1 | Covered |
    | bin <range[6],range[1]>                         |        5 |        1 | Covered |
    | bin <range[6],range[2]>                         |        9 |        1 | Covered |
    | bin <range[6],range[3]>                         |        5 |        1 | Covered |
    | bin <range[6],range[4]>                         |        3 |        1 | Covered |
    | bin <range[6],range[5]>                         |        2 |        1 | Covered |
    | bin <range[6],range[6]>                         |        6 |        1 | Covered |
    | bin <range[6],range[7]>                         |        7 |        1 | Covered |
    | bin <range[6],range[8]>                         |        7 |        1 | Covered |
    | bin <range[6],range[9]>                         |        4 |        1 | Covered |
    | bin <range[6],range[10]>                        |        4 |        1 | Covered |
    | bin <range[6],range[11]>                        |       10 |        1 | Covered |
    | bin <range[6],range[12]>                        |        3 |        1 | Covered |
    | bin <range[6],range[13]>                        |       10 |        1 | Covered |
    | bin <range[6],range[14]>                        |        6 |        1 | Covered |
    | bin <range[6],range[15]>                        |        5 |        1 | Covered |
    | bin <range[7],range[0]>                         |       12 |        1 | Covered |
    | bin <range[7],range[1]>                         |        5 |        1 | Covered |
    | bin <range[7],range[2]>                         |        5 |        1 | Covered |
    | bin <range[7],range[3]>                         |        3 |        1 | Covered |
    | bin <range[7],range[4]>                         |        7 |        1 | Covered |
    | bin <range[7],range[5]>                         |        9 |        1 | Covered |
    | bin <range[7],range[6]>                         |        6 |        1 | Covered |
    | bin <range[7],range[7]>                         |        7 |        1 | Covered |
    | bin <range[7],range[8]>                         |        6 |        1 | Covered |
    | bin <range[7],range[9]>                         |        6 |        1 | Covered |
    | bin <range[7],range[10]>                        |        3 |        1 | Covered |
    | bin <range[7],range[11]>                        |        3 |        1 | Covered |
    | bin <range[7],range[12]>                        |        5 |        1 | Covered |
    | bin <range[7],range[13]>                        |        6 |        1 | Covered |
    | bin <range[7],range[14]>                        |        5 |        1 | Covered |
    | bin <range[7],range[15]>                        |        1 |        1 | Covered |
    | bin <range[8],range[0]>                         |        6 |        1 | Covered |
    | bin <range[8],range[1]>                         |        3 |        1 | Covered |
    | bin <range[8],range[2]>                         |       10 |        1 | Covered |
    | bin <range[8],range[3]>                         |        3 |        1 | Covered |
    | bin <range[8],range[4]>                         |        4 |        1 | Covered |
    | bin <range[8],range[5]>                         |        6 |        1 | Covered |
    | bin <range[8],range[6]>                         |        7 |        1 | Covered |
    | bin <range[8],range[7]>                         |        1 |        1 | Covered |
    | bin <range[8],range[8]>                         |        7 |        1 | Covered |
    | bin <range[8],range[9]>                         |        5 |        1 | Covered |
    | bin <range[8],range[10]>                        |        4 |        1 | Covered |
    | bin <range[8],range[11]>                        |       11 |        1 | Covered |
    | bin <range[8],range[12]>                        |        3 |        1 | Covered |
    | bin <range[8],range[13]>                        |        4 |        1 | Covered |
    | bin <range[8],range[14]>                        |        9 |        1 | Covered |
    | bin <range[8],range[15]>                        |        3 |        1 | Covered |
    | bin <range[9],range[0]>                         |       11 |        1 | Covered |
    | bin <range[9],range[1]>                         |        6 |        1 | Covered |
    | bin <range[9],range[2]>                         |        2 |        1 | Covered |
    | bin <range[9],range[3]>                         |        8 |        1 | Covered |
    | bin <range[9],range[4]>                         |        7 |        1 | Covered |
    | bin <range[9],range[5]>                         |        7 |        1 | Covered |
    | bin <range[9],range[6]>                         |        6 |        1 | Covered |
    | bin <range[9],range[7]>                         |        5 |        1 | Covered |
    | bin <range[9],range[8]>                         |        3 |        1 | Covered |
    | bin <range[9],range[9]>                         |        7 |        1 | Covered |
    | bin <range[9],range[10]>                        |        7 |        1 | Covered |
    | bin <range[9],range[11]>                        |        2 |        1 | Covered |
    | bin <range[9],range[12]>                        |        8 |        1 | Covered |
    | bin <range[9],range[13]>                        |        5 |        1 | Covered |
    | bin <range[9],range[14]>                        |        6 |        1 | Covered |
    | bin <range[9],range[15]>                        |        5 |        1 | Covered |
    | bin <range[10],range[0]>                        |        6 |        1 | Covered |
    | bin <range[10],range[1]>                        |        5 |        1 | Covered |
    | bin <range[10],range[2]>                        |        3 |        1 | Covered |
    | bin <range[10],range[3]>                        |        7 |        1 | Covered |
    | bin <range[10],range[4]>                        |        3 |        1 | Covered |
    | bin <range[10],range[5]>                        |        6 |        1 | Covered |
    | bin <range[10],range[6]>                        |        6 |        1 | Covered |
    | bin <range[10],range[7]>                        |        4 |        1 | Covered |
    | bin <range[10],range[8]>                        |        4 |        1 | Covered |
    | bin <range[10],range[9]>                        |        6 |        1 | Covered |
    | bin <range[10],range[10]>                       |        5 |        1 | Covered |
    | bin <range[10],range[11]>                       |        6 |        1 | Covered |
    | bin <range[10],range[12]>                       |        4 |        1 | Covered |
    | bin <range[10],range[13]>                       |        9 |        1 | Covered |
    | bin <range[10],range[14]>                       |        6 |        1 | Covered |
    | bin <range[10],range[15]>                       |        2 |        1 | Covered |
    | bin <range[11],range[0]>                        |        2 |        1 | Covered |
    | bin <range[11],range[1]>                        |        4 |        1 | Covered |
    | bin <range[11],range[2]>                        |        6 |        1 | Covered |
    | bin <range[11],range[3]>                        |        2 |        1 | Covered |
    | bin <range[11],range[4]>                        |       12 |        1 | Covered |
    | bin <range[11],range[5]>                        |        3 |        1 | Covered |
    | bin <range[11],range[6]>                        |       12 |        1 | Covered |
    | bin <range[11],range[7]>                        |        7 |        1 | Covered |
    | bin <range[11],range[8]>                        |        4 |        1 | Covered |
    | bin <range[11],range[9]>                        |        6 |        1 | Covered |
    | bin <range[11],range[10]>                       |        5 |        1 | Covered |
    | bin <range[11],range[11]>                       |        8 |        1 | Covered |
    | bin <range[11],range[12]>                       |        5 |        1 | Covered |
    | bin <range[11],range[13]>                       |        6 |        1 | Covered |
    | bin <range[11],range[14]>                       |        8 |        1 | Covered |
    | bin <range[11],range[15]>                       |       10 |        1 | Covered |
    | bin <range[12],range[0]>                        |        7 |        1 | Covered |
    | bin <range[12],range[1]>                        |        5 |        1 | Covered |
    | bin <range[12],range[2]>                        |        4 |        1 | Covered |
    | bin <range[12],range[3]>                        |        2 |        1 | Covered |
    | bin <range[12],range[4]>                        |        7 |        1 | Covered |
    | bin <range[12],range[5]>                        |        5 |        1 | Covered |
    | bin <range[12],range[6]>                        |        4 |        1 | Covered |
    | bin <range[12],range[7]>                        |       10 |        1 | Covered |
    | bin <range[12],range[8]>                        |        7 |        1 | Covered |
    | bin <range[12],range[9]>                        |        7 |        1 | Covered |
    | bin <range[12],range[10]>                       |        6 |        1 | Covered |
    | bin <range[12],range[11]>                       |        5 |        1 | Covered |
    | bin <range[12],range[12]>                       |       10 |        1 | Covered |
    | bin <range[12],range[13]>                       |        6 |        1 | Covered |
    | bin <range[12],range[14]>                       |       10 |        1 | Covered |
    | bin <range[12],range[15]>                       |       11 |        1 | Covered |
    | bin <range[13],range[0]>                        |        4 |        1 | Covered |
    | bin <range[13],range[1]>                        |        3 |        1 | Covered |
    | bin <range[13],range[2]>                        |       10 |        1 | Covered |
    | bin <range[13],range[3]>                        |        3 |        1 | Covered |
    | bin <range[13],range[4]>                        |        7 |        1 | Covered |
    | bin <range[13],range[5]>                        |        8 |        1 | Covered |
    | bin <range[13],range[6]>                        |       11 |        1 | Covered |
    | bin <range[13],range[7]>                        |        2 |        1 | Covered |
    | bin <range[13],range[8]>                        |        9 |        1 | Covered |
    | bin <range[13],range[9]>                        |        3 |        1 | Covered |
    | bin <range[13],range[10]>                       |       10 |        1 | Covered |
    | bin <range[13],range[11]>                       |        7 |        1 | Covered |
    | bin <range[13],range[12]>                       |        3 |        1 | Covered |
    | bin <range[13],range[13]>                       |        9 |        1 | Covered |
    | bin <range[13],range[14]>                       |        4 |        1 | Covered |
    | bin <range[13],range[15]>                       |        5 |        1 | Covered |
    | bin <range[14],range[0]>                        |        3 |        1 | Covered |
    | bin <range[14],range[1]>                        |        1 |        1 | Covered |
    | bin <range[14],range[2]>                        |        7 |        1 | Covered |
    | bin <range[14],range[3]>                        |        9 |        1 | Covered |
    | bin <range[14],range[4]>                        |       11 |        1 | Covered |
    | bin <range[14],range[5]>                        |        8 |        1 | Covered |
    | bin <range[14],range[6]>                        |        5 |        1 | Covered |
    | bin <range[14],range[7]>                        |        3 |        1 | Covered |
    | bin <range[14],range[8]>                        |        5 |        1 | Covered |
    | bin <range[14],range[9]>                        |        4 |        1 | Covered |
    | bin <range[14],range[10]>                       |        4 |        1 | Covered |
    | bin <range[14],range[11]>                       |       11 |        1 | Covered |
    | bin <range[14],range[12]>                       |        5 |        1 | Covered |
    | bin <range[14],range[13]>                       |       10 |        1 | Covered |
    | bin <range[14],range[14]>                       |        7 |        1 | Covered |
    | bin <range[14],range[15]>                       |        7 |        1 | Covered |
    | bin <range[15],range[0]>                        |        4 |        1 | Covered |
    | bin <range[15],range[1]>                        |        5 |        1 | Covered |
    | bin <range[15],range[2]>                        |        5 |        1 | Covered |
    | bin <range[15],range[3]>                        |        8 |        1 | Covered |
    | bin <range[15],range[4]>                        |        5 |        1 | Covered |
    | bin <range[15],range[5]>                        |        4 |        1 | Covered |
    | bin <range[15],range[6]>                        |        4 |        1 | Covered |
    | bin <range[15],range[7]>                        |       13 |        1 | Covered |
    | bin <range[15],range[8]>                        |        2 |        1 | Covered |
    | bin <range[15],range[9]>                        |        5 |        1 | Covered |
    | bin <range[15],range[10]>                       |       11 |        1 | Covered |
    | bin <range[15],range[11]>                       |        7 |        1 | Covered |
    | bin <range[15],range[12]>                       |        4 |        1 | Covered |
    | bin <range[15],range[13]>                       |        4 |        1 | Covered |
    | bin <range[15],range[14]>                       |        8 |        1 | Covered |
    | bin <range[15],range[15]>                       |        5 |        1 | Covered |
    ===================================================================================


    ASSERTION COVERAGE
    =======================================================
    |      Name       |     Source      | Failed | Passed |
    |-----------------|-----------------|--------|--------|
    | @IMM_ASSERT#31@ | sequence.sv(31) |      0 |    256 |
    | @IMM_ASSERT#34@ | sequence.sv(34) |      0 |   1267 |
    =======================================================


CLASS - work.testbench_pkg/\testbench_pkg adder_driver \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    85.000% |
    |--------------------|--------|------------|
    | Statements         |        |    17 / 20 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 92.500%


    STATEMENT COVERAGE
    =======================================================================================================================================
    | Line |    Hits     |                                               Source: driver.sv                                                |
    |------|-------------|----------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                 |
    | 2    |             | class adder_driver extends uvm_driver #(adder_item #(G_DATA_WIDTH));                                           |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_driver)                                                                           |
    | 4    |             |                                                                                                                |
    | 5    |             |   virtual adder_intf intf;                                                                                     |
    | 6    |             |                                                                                                                |
    | 7    |             |   function new (string name = "", uvm_component parent);                                                       |
    | 8    |      1      |     super.new(name,parent);                                                                                    |
    | 9    |             |   endfunction                                                                                                  |
    | 10   |             |                                                                                                                |
    | 11   |             |   function void build_phase(uvm_phase phase);                                                                  |
    | 12   |      1      |     super.build_phase(phase);                                                                                  |
    | 13   |      1      |     void'(uvm_resource_db#(virtual adder_intf)::read_by_name(.scope("ifs"), .name("adder_intf"), .val(intf))); |
    | 14   |             |   endfunction                                                                                                  |
    | 15   |             |                                                                                                                |
    | 16   |             |                                                                                                                |
    | 17   |             |   virtual task reset_phase(uvm_phase phase);                                                                   |
    | 18   |      1      |     phase.raise_objection(this);                                                                               |
    | 19   |      1      |     intf.i_rst = 1'b1;                                                                                         |
    | 20   |      1      |     repeat(5)                                                                                                  |
    | 21   |             |       @(posedge intf.i_clk)                                                                                    |
    | 22   |      5      |     intf.i_rst = 1'b0;                                                                                         |
    | 23   |             |                                                                                                                |
    | 24   |      1      |     phase.drop_objection(this);                                                                                |
    | 25   |             |   endtask: reset_phase                                                                                         |
    | 26   |             |                                                                                                                |
    | 27   |             |   virtual task run_phase(uvm_phase phase);                                                                     |
    | 28   |             |     adder_item #(G_DATA_WIDTH) req_item;                                                                       |
    | 29   |             |                                                                                                                |
    | 30   |      1      |     forever begin                                                                                              |
    | 31   |     259     |       if(!intf.i_rst) begin                                                                                    |
    | 32   |     257     |         seq_item_port.get_next_item(req_item);                                                                 |
    | 33   |             |                                                                                                                |
    | 34   |     256     |         intf.i_valid = 1'b1;                                                                                   |
    | 35   |     256     |         intf.i_A = req_item.i_A;                                                                               |
    | 36   |     256     |         intf.i_B = req_item.i_B;                                                                               |
    | 37   |     256     |         @(posedge intf.i_clk);                                                                                 |
    | 38   |     256     |         seq_item_port.item_done();                                                                             |
    | 39   |             |       end else                                                                                                 |
    | 40   |      2      |         @(posedge intf.i_clk);                                                                                 |
    | 41   |             |     end                                                                                                        |
    | 42   |             |   endtask                                                                                                      |
    =======================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: driver.sv    |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#31#1# |  2/2 |
    |     if_branch   |  257 |
    |     else_branch |    2 |
    ==========================


CLASS - work.testbench_pkg/\testbench_pkg adder_monitor_in \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    80.000% |
    |--------------------|--------|------------|
    | Statements         |        |    12 / 15 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 90.000%


    STATEMENT COVERAGE
    ========================================================================================================================================
    | Line |    Hits     |                                               Source: monitor.sv                                                |
    |------|-------------|-----------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                  |
    | 2    |             | class adder_monitor_in extends uvm_monitor;                                                                     |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_monitor_in)                                                                        |
    | 4    |             |                                                                                                                 |
    | 5    |             |   uvm_analysis_port #(adder_item #(G_DATA_WIDTH)) mon_in;                                                       |
    | 6    |             |   adder_item #(G_DATA_WIDTH) datum;                                                                             |
    | 7    |             |   virtual adder_intf intf;                                                                                      |
    | 8    |             |                                                                                                                 |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                        |
    | 10   |      1      |     super.new(name,parent);                                                                                     |
    | 11   |             |   endfunction : new                                                                                             |
    | 12   |             |                                                                                                                 |
    | 13   |             |                                                                                                                 |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                   |
    | 15   |      1      |     super.build_phase(phase);                                                                                   |
    | 16   |      1      |     void'(uvm_resource_db#(virtual adder_intf)::read_by_name(.scope("ifs"), .name("adder_intf"), .val(intf)));  |
    | 17   |             |                                                                                                                 |
    | 18   |             |                                                                                                                 |
    | 19   |      1      |     mon_in = new ("mon_in",this);                                                                               |
    | 20   |             |   endfunction: build_phase                                                                                      |
    | 21   |             |                                                                                                                 |
    | 22   |             |   virtual task run_phase(uvm_phase phase);                                                                      |
    | 23   |      1      |     forever begin                                                                                               |
    | 24   |     264     |       if(intf.i_valid && !intf.i_rst) begin                                                                     |
    | 25   |     261     |         datum = adder_item #(G_DATA_WIDTH)::type_id::create("datum",this);                                      |
    | 26   |     261     |         datum.i_A <= intf.i_A;                                                                                  |
    | 27   |     261     |         datum.i_B <= intf.i_B;                                                                                  |
    | 28   |     261     |         @(posedge intf.i_clk);                                                                                  |
    | 29   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR IN  i_A=0x%0h, i_B=0x%0h",datum.i_A,datum.i_B),UVM_LOW) |
    | 30   |     260     |         mon_in.write(datum);                                                                                    |
    | 31   |             |       end else                                                                                                  |
    | 32   |      3      |         @(posedge intf.i_clk);                                                                                  |
    | 33   |             |     end                                                                                                         |
    | 34   |             |   endtask : run_phase                                                                                           |
    ========================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: monitor.sv   |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#24#1# |  2/2 |
    |     if_branch   |  261 |
    |     else_branch |    3 |
    ==========================


CLASS - work.testbench_pkg/\testbench_pkg adder_monitor_out \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 89.285%


    STATEMENT COVERAGE
    =======================================================================================================================================
    | Line |    Hits     |                                             Source: monitor_out.sv                                             |
    |------|-------------|----------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                 |
    | 2    |             | class adder_monitor_out extends uvm_monitor;                                                                   |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_monitor_out)                                                                      |
    | 4    |             |                                                                                                                |
    | 5    |             |   uvm_analysis_port #(adder_item #(G_DATA_WIDTH)) mon_out;                                                     |
    | 6    |             |   virtual adder_intf intf;                                                                                     |
    | 7    |             |   adder_item #(G_DATA_WIDTH) datum;                                                                            |
    | 8    |             |                                                                                                                |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                       |
    | 10   |      1      |     super.new(name,parent);                                                                                    |
    | 11   |             |   endfunction : new                                                                                            |
    | 12   |             |                                                                                                                |
    | 13   |             |                                                                                                                |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                  |
    | 15   |      1      |     super.build_phase(phase);                                                                                  |
    | 16   |      1      |     void'(uvm_resource_db#(virtual adder_intf)::read_by_name(.scope("ifs"), .name("adder_intf"), .val(intf))); |
    | 17   |             |                                                                                                                |
    | 18   |      1      |     mon_out = new ("mon_out",this);                                                                            |
    | 19   |             |   endfunction: build_phase                                                                                     |
    | 20   |             |                                                                                                                |
    | 21   |             |   virtual task run_phase(uvm_phase phase);                                                                     |
    | 22   |             |                                                                                                                |
    | 23   |      1      |     forever begin                                                                                              |
    | 24   |     264     |       if(intf.o_valid) begin                                                                                   |
    | 25   |     260     |         datum = adder_item #(G_DATA_WIDTH)::type_id::create("datum",this);                                     |
    | 26   |     260     |         datum.o_C <= intf.o_C;                                                                                 |
    | 27   |     260     |         @(posedge intf.i_clk);                                                                                 |
    | 28   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR OUT  o_C=0x%0h",datum.o_C),UVM_LOW)                    |
    | 29   |     259     |         mon_out.write(datum);                                                                                  |
    | 30   |             |       end else                                                                                                 |
    | 31   |      4      |         @(posedge intf.i_clk);                                                                                 |
    | 32   |             |     end                                                                                                        |
    | 33   |             |   endtask : run_phase                                                                                          |
    =======================================================================================================================================


    BRANCH COVERAGE
    =============================
    |  Source: monitor_out.sv   |
    =============================
    | Branch/Line     |  Hits   |
    =============================
    | IF branch#24#1# |     2/2 |
    |     if_branch   |     260 |
    |     else_branch |       4 |
    =============================


CLASS - work.testbench_pkg/\testbench_pkg adder_scoreboard \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    80.769% |
    |--------------------|--------|------------|
    | Statements         |        |    21 / 26 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |    33.333% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 6 |
    | Branches           |        |      0 / 3 |
    ============================================
    WEIGHTED AVERAGE: 57.051%


    STATEMENT COVERAGE
    ====================================================================================================================================================================
    | Line |    Hits     |                                                            Source: scoreboard.sv                                                            |
    |------|-------------|---------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                              |
    | 2    |             | class adder_scoreboard extends uvm_scoreboard;                                                                                              |
    | 3    | UNR,UNR,518 |   `uvm_component_utils(adder_scoreboard)                                                                                                    |
    | 4    |             |                                                                                                                                             |
    | 5    |             |   function new(string name = "", uvm_component parent);                                                                                     |
    | 6    |      1      |     super.new(name,parent);                                                                                                                 |
    | 7    |             |   endfunction : new                                                                                                                         |
    | 8    |             |                                                                                                                                             |
    | 9    |             |   uvm_tlm_analysis_fifo #(adder_item #(G_DATA_WIDTH)) fifo_in;                                                                              |
    | 10   |             |   uvm_tlm_analysis_fifo #(adder_item #(G_DATA_WIDTH)) fifo_out;                                                                             |
    | 11   |             |                                                                                                                                             |
    | 12   |             |   uvm_get_port #(adder_item #(G_DATA_WIDTH)) data_get_port;                                                                                 |
    | 13   |             |   uvm_get_port #(adder_item #(G_DATA_WIDTH)) result_get_port;                                                                               |
    | 14   |             |                                                                                                                                             |
    | 15   |             |   adder_item #(G_DATA_WIDTH) in;                                                                                                            |
    | 16   |             |   adder_item #(G_DATA_WIDTH) out;                                                                                                           |
    | 17   |             |                                                                                                                                             |
    | 18   |             |   function void build_phase (uvm_phase phase);                                                                                              |
    | 19   |      1      |     super.build_phase(phase);                                                                                                               |
    | 20   |             |                                                                                                                                             |
    | 21   |      1      |     fifo_in = new("fifo_in",this);                                                                                                          |
    | 22   |      1      |     fifo_out = new("fifo_out",this);                                                                                                        |
    | 23   |             |                                                                                                                                             |
    | 24   |      1      |     data_get_port = new("data_get_port",this);                                                                                              |
    | 25   |      1      |     result_get_port = new("result_get_port",this);                                                                                          |
    | 26   |             |   endfunction : build_phase                                                                                                                 |
    | 27   |             |                                                                                                                                             |
    | 28   |             |   function void connect_phase(uvm_phase phase);                                                                                             |
    | 29   |      1      |     super.connect_phase(phase);                                                                                                             |
    | 30   |      1      |     data_get_port.connect(fifo_in.get_export);                                                                                              |
    | 31   |      1      |     result_get_port.connect(fifo_out.get_export);                                                                                           |
    | 32   |             |   endfunction : connect_phase                                                                                                               |
    | 33   |             |                                                                                                                                             |
    | 34   |             |   function void check_phase(uvm_phase phase);                                                                                               |
    | 35   |      1      |     super.check_phase(phase);                                                                                                               |
    | 36   |             |                                                                                                                                             |
    | 37   |    1,259    |     while(result_get_port.can_get()) begin                                                                                                  |
    | 38   |     259     |       in  = adder_item #(G_DATA_WIDTH)::type_id::create("in",this);                                                                         |
    | 39   |     259     |       out = adder_item #(G_DATA_WIDTH)::type_id::create("out",this);                                                                        |
    | 40   |             |                                                                                                                                             |
    | 41   |     259     |       result_get_port.try_get(out);                                                                                                         |
    | 42   |     259     |       data_get_port.try_get(in);                                                                                                            |
    | 43   |             |                                                                                                                                             |
    | 44   |     259     |       if(in.i_A + in.i_B != out.o_C)                                                                                                        |
    | 45   |    0,0,0    |         `uvm_error(get_type_name(),$sformatf("FAIL i_A=0x%0h, i_B=0x%0h, o_C=0x%0h, exp=0x%0h",in.i_A,in.i_B,out.o_C,in.i_A+in.i_B))        |
    | 46   |             |       else                                                                                                                                  |
    | 47   | 259,259,259 |         `uvm_info(get_type_name(),$sformatf("PASS i_A=0x%0h, i_B=0x%0h, o_C=0x%0h, exp=0x%0h",in.i_A,in.i_B,out.o_C,in.i_A+in.i_B),UVM_LOW) |
    | 48   |             |     end                                                                                                                                     |
    | 49   |             |   endfunction : check_phase                                                                                                                 |
    ====================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |    Source: scoreboard.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#44#1#      |  1/2 |
    |     if_branch        |    0 |
    |     else_branch      |  259 |
    |----------------------|------|
    | IF branch#45#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#47#1#      |  1/2 |
    |     if_branch        |  259 |
    |     all_false_branch |    0 |
    ===============================


CLASS - work.testbench_pkg/\testbench_pkg adder_env \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    WEIGHTED AVERAGE: 78.571%


    STATEMENT COVERAGE
    ==============================================================================================================
    | Line |    Hits     |                                    Source: env.sv                                     |
    |------|-------------|---------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                        |
    | 2    |             | class adder_env extends uvm_env;                                                      |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(adder_env)                                                     |
    | 4    |             |                                                                                       |
    | 5    |             |   uvm_sequencer #(adder_item #(G_DATA_WIDTH)) seqr;                                   |
    | 6    |             |   adder_driver drv;                                                                   |
    | 7    |             |   adder_monitor_out res_mon;                                                          |
    | 8    |             |   adder_monitor_in data_mon;                                                          |
    | 9    |             |   adder_scoreboard scb;                                                               |
    | 10   |             |                                                                                       |
    | 11   |             |   function new (string name = "", uvm_component parent);                              |
    | 12   |      1      |     super.new(name,parent);                                                           |
    | 13   |             |   endfunction : new                                                                   |
    | 14   |             |                                                                                       |
    | 15   |             |   function void build_phase(uvm_phase phase);                                         |
    | 16   |      1      |     super.build_phase(phase);                                                         |
    | 17   |      1      |     seqr = uvm_sequencer #(adder_item #(G_DATA_WIDTH))::type_id::create("seqr",this); |
    | 18   |             |                                                                                       |
    | 19   |      1      |     drv = adder_driver::type_id::create("drv",this);                                  |
    | 20   |      1      |     res_mon = adder_monitor_out::type_id::create("res_mon",this);                     |
    | 21   |      1      |     data_mon = adder_monitor_in::type_id::create("data_mon",this);                    |
    | 22   |      1      |     scb = adder_scoreboard::type_id::create("scb",this);                              |
    | 23   |             |   endfunction : build_phase                                                           |
    | 24   |             |                                                                                       |
    | 25   |             |   function void connect_phase(uvm_phase phase);                                       |
    | 26   |      1      |     super.connect_phase(phase);                                                       |
    | 27   |      1      |     drv.seq_item_port.connect(seqr.seq_item_export);                                  |
    | 28   |      1      |     data_mon.mon_in.connect(scb.fifo_in.analysis_export);                             |
    | 29   |      1      |     res_mon.mon_out.connect(scb.fifo_out.analysis_export);                            |
    | 30   |             |   endfunction : connect_phase                                                         |
    | 31   |             |                                                                                       |
    ==============================================================================================================


CLASS - work.testbench_pkg/\testbench_pkg adder_test \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    81.818% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 11 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    WEIGHTED AVERAGE: 81.818%


    STATEMENT COVERAGE
    ===============================================================================
    | Line |   Hits    |                     Source: test.sv                      |
    |------|-----------|----------------------------------------------------------|
    | 1    |           | class adder_test extends uvm_test;                       |
    | 2    | UNR,UNR,1 |   `uvm_component_utils(adder_test)                       |
    | 3    |           |                                                          |
    | 4    |           |   adder_env env;                                         |
    | 5    |           |   adder_sequence seq;                                    |
    | 6    |           |                                                          |
    | 7    |           |                                                          |
    | 8    |           |   function new (string name = "", uvm_component parent); |
    | 9    |     1     |     super.new(name,parent);                              |
    | 10   |           |   endfunction : new                                      |
    | 11   |           |                                                          |
    | 12   |           |                                                          |
    | 13   |           |   function void build_phase(uvm_phase phase);            |
    | 14   |     1     |     super.build_phase(phase);                            |
    | 15   |     1     |     env = adder_env::type_id::create("env",this);        |
    | 16   |           |   endfunction : build_phase                              |
    | 17   |           |                                                          |
    | 18   |           |   task run_phase(uvm_phase phase);                       |
    | 19   |     1     |     seq = adder_sequence::type_id::create("seq",this);   |
    | 20   |     1     |     phase.raise_objection(this);                         |
    | 21   |     1     |     seq.start(env.seqr);                                 |
    | 22   |           |                                                          |
    | 23   |     1     |     phase.phase_done.set_drain_time(this, 50ns);         |
    | 24   |     1     |     phase.drop_objection(this);                          |
    | 25   |           |                                                          |
    | 26   |           |   endtask : run_phase                                    |
    ===============================================================================


CLASS - work.testbench_pkg/\testbench_pkg adder_item \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    12.500% |
    |--------------------|--------|------------|
    | Statements         |        |     2 / 16 |
    | Subprograms        |        |      2 / 6 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE: 6.250%


    STATEMENT COVERAGE
    ======================================================================================================================================================
    | Line |                            Hits                             |                           Source: sequence_item.sv                            |
    |------|-------------------------------------------------------------|-------------------------------------------------------------------------------|
    | 1    |                                                             | class adder_item #(parameter int G_DATA_WIDTH = 2) extends uvm_sequence_item; |
    | 2    | UNR,UNR,UNR,UNR,UNR,UNR,256,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(adder_item #(G_DATA_WIDTH))                               |
    | 3    |                                                             |                                                                               |
    | 4    |                                                             |   rand logic [G_DATA_WIDTH-1:0] i_A;                                          |
    | 5    |                                                             |   rand logic [G_DATA_WIDTH-1:0] i_B;                                          |
    | 6    |                                                             |   logic [G_DATA_WIDTH:0] o_C;                                                 |
    | 7    |                                                             |                                                                               |
    | 8    |                                                             |   function new(string name = "");                                             |
    | 9    |                            1295                             |     super.new(name);                                                          |
    | 10   |                                                             |   endfunction : new                                                           |
    | 11   |                                                             |                                                                               |
    ======================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |  Source: sequence_item.sv   |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#2#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


